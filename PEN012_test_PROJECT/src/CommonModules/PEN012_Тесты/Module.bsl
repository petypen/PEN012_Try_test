// @strict-types

//
#Область ПрограммныйИнтерфейс

// Тест1 - деление на ноль.
// 
// Параметры:
//  НаименованиеТеста - Строка - Наименование теста
//  КоличествоПовторенийТеста - Число - Количество повторений теста
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ТаблицаРезультатов
Функция Тест(НаименованиеТеста, КоличествоПовторенийТеста) Экспорт

	//КОНСТАНТЫ
	ИТЕРАЦИИ = 10000;

	ТаблицаРезультатов = ТаблицаРезультатов(КоличествоПовторенийТеста);
	
	// Без исключения
	Для Индекс = 1 По КоличествоПовторенийТеста Цикл
		Длительность = ТестБезИсключения(НаименованиеТеста, ИТЕРАЦИИ);
		СтрокаТаблицы = ТаблицаРезультатов.Получить(Индекс - 1);
		СтрокаТаблицы.Итерация = Индекс;
		СтрокаТаблицы.ДлительностьБезИсключения = Длительность;
	КонецЦикла;
	
	// С исключением
	Для Индекс = 1 По КоличествоПовторенийТеста Цикл
		Длительность = ТестСИсключением(НаименованиеТеста, Итерации);
		СтрокаТаблицы = ТаблицаРезультатов.Получить(Индекс - 1);
		СтрокаТаблицы.Итерация = Индекс;
		СтрокаТаблицы.ДлительностьСИсключением = Длительность;
	КонецЦикла;

	Возврат ТаблицаРезультатов;
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

//@skip-check dynamic-access-method-not-found
Функция ТестБезИсключения(НаименованиеТеста, Итерации)

	МодульТеста = МодульТеста(НаименованиеТеста);

	МоментСтарта = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Для Индекс = 1 По Итерации Цикл

		Если Не МодульТеста.ЕстьИсключительнаяСитуация(Индекс) Тогда
			// тут гарантированно происходит исключительная ситуация
			МодульТеста.ИсключительнаяСитуация(Индекс);
		Иначе
			// обработка ошибки без вызова исключения
			МодульТеста.ПолезнаяНагрузка();
		КонецЕсли;

	КонецЦикла;
	МоментОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Возврат МоментОкончания - МоментСтарта;
КонецФункции

//@skip-check dynamic-access-method-not-found
Функция ТестСИсключением(НаименованиеТеста, Итерации)

	МодульТеста = МодульТеста(НаименованиеТеста);

	МоментСтарта = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Для Индекс = 1 По Итерации Цикл

		Попытка
			// тут гарантированно происходит исключительная ситуация
			МодульТеста.ИсключительнаяСитуация(Индекс);
		Исключение
			// обработка ошибки без вызова исключения
			МодульТеста.ПолезнаяНагрузка();
		КонецПопытки;

	КонецЦикла;
	МоментОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Возврат МоментОкончания - МоментСтарта;
КонецФункции


Функция МодульТеста(НаименованиеТеста)

	Если НаименованиеТеста = "Деление на ноль" Тогда
		ИмяОбщегоМодуля = "PEN012_Тест1";
	ИначеЕсли НаименованиеТеста = "Выход за границу массива" Тогда
		ИмяОбщегоМодуля = "PEN012_Тест2";
	ИначеЕсли НаименованиеТеста = "Вызов исключения как оператора" Тогда
		ИмяОбщегоМодуля = "PEN012_Тест3";
	ИначеЕсли НаименованиеТеста = "Вызов исключения как функции" Тогда
		ИмяОбщегоМодуля = "PEN012_Тест3";
	КонецЕсли;

	МодульТеста = ОбщийМодульПоИмени(ИмяОбщегоМодуля);
	Возврат МодульТеста;
КонецФункции

//@skip-check server-execution-safe-mode
Функция ОбщийМодульПоИмени(ИмяОбщегоМодуля)

	Если Метаданные.ОбщиеМодули.Найти(ИмяОбщегоМодуля) <> Неопределено Тогда
		МодульТеста = Вычислить(ИмяОбщегоМодуля);
	КонецЕсли;

	Возврат МодульТеста
КонецФункции

// Таблица результатов, инициализированная начальными значениями
// 
// Параметры:
//  КоличествоПовторенийТеста - Число - Количество повторений теста
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица результатов:
// * Итерация - Число - количество попыток теста
// * ДлительностьБезИсключения - Число - длительность теста в мсек
// * ДлительностьСИсключением - Число - длительность теста в мсек
Функция ТаблицаРезультатов(КоличествоПовторенийТеста)

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Итерация", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	Таблица.Колонки.Добавить("ДлительностьБезИсключения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9, 0)));
	Таблица.Колонки.Добавить("ДлительностьСИсключением", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9, 0)));

	Для Индекс = 1 По КоличествоПовторенийТеста Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Итерация = Индекс;
		СтрокаТаблицы.ДлительностьБезИсключения = 0;
		СтрокаТаблицы.ДлительностьСИсключением = 0;
	КонецЦикла;

	Возврат Таблица;
КонецФункции

#КонецОбласти